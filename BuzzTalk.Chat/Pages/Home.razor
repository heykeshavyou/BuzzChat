@page "/"
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
<PageTitle>BuzzTalk - Login</PageTitle>

<!-- Fullscreen dark background -->
<div class="d-flex justify-content-center align-items-center vh-100" style="background: #121212;">
	<div class="p-5 rounded-4 shadow" style="background-color: #1e1e1e; min-width: 400px; max-width: 90%; color: white;">

		<h2 class="text-center mb-4 fw-bold text-primary">BuzzTalk</h2>

		<EditForm Model="loginModel" OnValidSubmit="LoginAsync">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="mb-3">
				<label for="username" class="form-label text-light">Username</label>
				<InputText id="username" class="form-control p-2 border-primary bg-dark text-light" @bind-Value="loginModel.username" />
				<ValidationMessage For="() => loginModel.username" />
			</div>

			<div class="mb-3">
				<label for="password" class="form-label text-light">Password</label>
				<InputText id="password" type="password" class="form-control p-2 border-primary bg-dark text-light" @bind-Value="loginModel.password" />
				<ValidationMessage For="() => loginModel.password" />
			</div>

			<button class="btn btn-primary w-100 py-2 mt-3 fw-semibold" disabled="@IsProcessing">
				@if (IsProcessing)
				{
					<div class="spinner-border spinner-border-sm text-light" role="status">
						<span class="visually-hidden">Loading...</span>
					</div>
				}
				else
				{
					<span>Login</span>
				}
			</button>
		</EditForm>

		<div class="text-center mt-4">
			<NavLink href="/signin" class="text-decoration-none text-secondary">
				Don't have an account? <span class="text-primary fw-semibold">Sign up</span>
			</NavLink>
		</div>
	</div>
</div>

@code {
	[CascadingParameter(Name = "State")]
	public AuthenticationState AuthenticationState { get; set; } = new();

	public LoginModel loginModel { get; set; } = new();
	private bool IsProcessing = false;

	private async Task LoginAsync()
	{
		try
		{
			IsProcessing = true;

			string data = JsonConvert.SerializeObject(loginModel);
			StringContent content = new(data, Encoding.UTF8, "application/json");
			var res = await httpClient.PostAsync($"{Url.baseUrl}api/Account/Login", content);
			if (res.IsSuccessStatusCode)
			{
				var contentRes = await res.Content.ReadAsStringAsync();
				await JSRuntime.InvokeVoidAsync("localStorage.setItem", AuthenticationState.BuzzKey, contentRes);

				var token = JsonConvert.DeserializeObject<UserModel>(contentRes);
				AuthenticationState.OnPropertyChanged(token);

				Navigation.NavigateTo("/chat");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine("Login error: " + ex.Message);
		}
		finally
		{
			IsProcessing = false;
		}
	}
}
